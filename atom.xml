<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Francisco Souza</title>
	<link href="https://blog.fsouza.dev/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.fsouza.dev"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-02-12T00:00:00+00:00</updated>
	<id>https://blog.fsouza.dev/atom.xml</id>
	<entry xml:lang="en">
		<title>Making format-on-save fast with prettierd</title>
		<published>2021-02-12T00:00:00+00:00</published>
		<updated>2021-02-12T00:00:00+00:00</updated>
		<link href="https://blog.fsouza.dev/prettierd-neovim-format-on-save/" type="text/html"/>
		<id>https://blog.fsouza.dev/prettierd-neovim-format-on-save/</id>
		<content type="html">&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#x27;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.fsouza.dev&#x2F;prettierd-neovim-format-on-save&#x2F;#intro&quot;&gt;Intro&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.fsouza.dev&#x2F;prettierd-neovim-format-on-save&#x2F;#who-cares&quot;&gt;Who cares?!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.fsouza.dev&#x2F;prettierd-neovim-format-on-save&#x2F;#my-visual-studio-code-doesn-t-take-a-second-to-format-on-save-your-vim-is-trash&quot;&gt;&amp;quot;My Visual Studio Code doesn&#x27;t take a second to format-on-save, your Vim is trash&amp;quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.fsouza.dev&#x2F;prettierd-neovim-format-on-save&#x2F;#installing-and-starting-prettierd&quot;&gt;Installing and starting prettierd&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.fsouza.dev&#x2F;prettierd-neovim-format-on-save&#x2F;#integrating-neovim-with-prettierd&quot;&gt;Integrating Neovim with prettierd&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.fsouza.dev&#x2F;prettierd-neovim-format-on-save&#x2F;#not-just-typescript-and-javascript&quot;&gt;Not just TypeScript and JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.fsouza.dev&#x2F;prettierd-neovim-format-on-save&#x2F;#bonus-using-it-on-the-command-line-with-prettierme&quot;&gt;Bonus: using it on the command line with prettierme&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h2&gt;
&lt;p&gt;Back in June of 2020, when I was migrating my Neovim configuration to Lua and
to the native LSP client available in neovim 0.5.0, my main language at work
was TypeScript and we used &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;prettier.io&quot;&gt;prettier&lt;&#x2F;a&gt; to keep our code
formatted, and I had it configured to format-on-save with
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neoclide&#x2F;coc-prettier&quot;&gt;coc-prettier&lt;&#x2F;a&gt;. One of the first
issues I ran into was performance: saving files became deadly slow, to the
point where I gave up and disabled format-on-save.&lt;&#x2F;p&gt;
&lt;p&gt;The thing is: prettier is known to be a faster code formatter, and I didn&#x27;t
have the issue before, so what&#x27;s the  problem here? Is Neovim making prettier
slower? Is coc-prettier doing some magic shit?&lt;&#x2F;p&gt;
&lt;p&gt;Before we start looking into this, let&#x27;s see how prettier behaves when
formatting a somewhat large TypeScript file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#010101;&quot;&gt;％ wc -l sample.ts
     586 sample.ts
％ time npx prettier -w sample.ts
sample.ts 332ms
        0.85 real         0.91 user         0.11 sys
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s interesting that prettier reports that it took 332ms to format the file,
but &lt;code&gt;time&lt;&#x2F;code&gt; reports that the whole process took 850ms. Who&#x27;s lying?&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a look at multiple files:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#010101;&quot;&gt;％ wc -l sample*.ts
     330 sample1.ts
     718 sample2.ts
     655 sample3.ts
    2511 sample4.ts
     601 sample5.ts
    4815 total
％ time npx prettier -w sample1.ts
sample1.ts 290ms
        0.93 real         0.88 user         0.11 sys
％ time npx prettier -w sample2.ts
sample2.ts 358ms
        1.02 real         1.04 user         0.12 sys
％ time npx prettier -w sample3.ts
sample3.ts 330ms
        0.97 real         0.95 user         0.13 sys
％ time npx prettier -w sample4.ts
sample4.ts 648ms
        1.27 real         1.48 user         0.13 sys
％ time npx prettier -w sample5.ts
sample5.ts 375ms
        1.00 real         1.00 user         0.12 sys
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how formatting &lt;code&gt;sample2.ts&lt;&#x2F;code&gt; and &lt;code&gt;sample4.ts&lt;&#x2F;code&gt; takes more than 1 second in
total! Also interesting is the fact that even though &lt;code&gt;sample1.ts&lt;&#x2F;code&gt; is less the
half the size of &lt;code&gt;sample2.ts&lt;&#x2F;code&gt;, formatting &lt;code&gt;sample2.ts&lt;&#x2F;code&gt; does not take twice as
much time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;who-cares&quot;&gt;Who cares?!&lt;&#x2F;h2&gt;
&lt;p&gt;OK, let&#x27;s take a step back and reflect: who cares if prettier is slow to format
my files? I could run it on a git hook or something like that and not even
notice.&lt;&#x2F;p&gt;
&lt;p&gt;As I mentioned before, I was running format-on-save in Neovim, with a simple
setup, not very fancy:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-vimscript&quot; data-lang=&quot;vimscript&quot;&gt;&lt;span style=&quot;color:#010101;&quot;&gt;autocmd BufWritePre *.ts execute &amp;quot;silent %!npx prettier --stdin-filepath &amp;#39;&amp;quot; . expand(&amp;#39;%:p&amp;#39;) . &amp;quot;&amp;#39;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fsouza&#x2F;dotfiles&#x2F;blob&#x2F;0b6d3daaa844796f916b3f056a66af0e25a76c3c&#x2F;autoload&#x2F;fsouza&#x2F;prettier.vim#L19-L30&quot;&gt;(it was a bit fancier than that, but not by much)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So, imagine you&#x27;re using Neovim and every time you save the file you have to
wait 1 second. You&#x27;d be mad, right?! There must be a better way...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-visual-studio-code-doesn-t-take-a-second-to-format-on-save-your-vim-is-trash&quot;&gt;&amp;quot;My Visual Studio Code doesn&#x27;t take a second to format-on-save, your Vim is trash&amp;quot;&lt;&#x2F;h2&gt;
&lt;p&gt;To be fair, coc-prettier was pretty fast too. How is that even possible?&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s go back to our sample files, but this time let&#x27;s see what prettier does
if we pass all 5 files to it instead of invoking it 5 times:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#010101;&quot;&gt;％ time npx prettier -w *.ts
sample1.ts 248ms
sample2.ts 205ms
sample3.ts 110ms
sample4.ts 327ms
sample5.ts 79ms
        1.61 real         2.09 user         0.15 sys
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This time &lt;code&gt;sample2.ts&lt;&#x2F;code&gt; is faster than &lt;code&gt;sample1.ts&lt;&#x2F;code&gt;, even though it&#x27;s twice as
large! What&#x27;s going on? Turns out &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prettier&#x2F;prettier&#x2F;issues&#x2F;3386&quot;&gt;prettier is slow to
start&lt;&#x2F;a&gt;, both because of
overhead introduced by node.js and prettier itself (it has tons of plugins and
dependencies).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;And how is it fast to format-on-save using VSCode&#x2F;coc-prettier?&lt;&#x2F;strong&gt; Simple:
both coc-prettier and Visual Studio Code are long-running node.js processes,
which host prettier as a library, therefore paying the initialization cost
twice.&lt;&#x2F;p&gt;
&lt;p&gt;The solution is simple: we need a long-running node.js process! If you read
through the issue about slow startups in prettier, someone suggests using
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;josephfrazier&#x2F;prettier_d&quot;&gt;prettier_d&lt;&#x2F;a&gt;, but after looking at
how large that project was, I was a bit scared.&lt;&#x2F;p&gt;
&lt;p&gt;Doing some more research, I found
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mantoni&#x2F;eslint_d.js&#x2F;&quot;&gt;eslint_d.js&lt;&#x2F;a&gt;, which solves a similar
issue for eslint, by introducing a daemon which supports binding on a TCP
socket! And the author of eslint_d.js extracted its core functionality in a
library called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mantoni&#x2F;core_d.js&quot;&gt;core_d.js&lt;&#x2F;a&gt;. So I figured
I could combine that library with prettier and make
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fsouza&#x2F;prettierd&quot;&gt;prettierd&lt;&#x2F;a&gt;, a TCP-enabled daemon for
formatting code using prettier!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing-and-starting-prettierd&quot;&gt;Installing and starting prettierd&lt;&#x2F;h2&gt;
&lt;p&gt;The code for prettierd is pretty boring, as it is basically a tiny wrapper
around core_d to invoke the proper prettier functions whenever the server
receives a &amp;quot;request&amp;quot;. The two important things to know about are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;You can install it with npm and start it with &lt;code&gt;prettierd start&lt;&#x2F;code&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#010101;&quot;&gt;％ npm install -g @fsouza&#x2F;prettierd
％ prettierd start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alternatively you can do both things with &lt;code&gt;npx&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#010101;&quot;&gt;％ npx -p @fsouza&#x2F;prettierd prettierd start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;When it starts, prettierd writes a file with its port number and token&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#010101;&quot;&gt;％ cat ~&#x2F;.prettierd
53561 cb2ad753df0aca85
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This means that prettierd is running on port 53561 and we can use the token
&lt;code&gt;cb2ad753df0aca85&lt;&#x2F;code&gt; in our requests to format our source code.&lt;&#x2F;p&gt;
&lt;p&gt;core_d&#x27;s protocol is pretty simple:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#010101;&quot;&gt;&amp;lt;token&amp;gt; &amp;lt;working-dir&amp;gt; &amp;lt;file-name&amp;gt;\n
&amp;lt;file-content&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For example, we can use netcat:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#010101;&quot;&gt;％ echo &amp;quot;cb2ad753df0aca85 $PWD sample2.ts&amp;quot; | cat - sample2.ts | &#x2F;usr&#x2F;bin&#x2F;time nc localhost 53561 &amp;gt;sample2-formatted.ts
        0.14 real         0.00 user         0.00 sys
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remember how formatting &lt;code&gt;sample2.ts&lt;&#x2F;code&gt; took over 1 second? Not anymore. :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;integrating-neovim-with-prettierd&quot;&gt;Integrating Neovim with prettierd&lt;&#x2F;h2&gt;
&lt;p&gt;Using netcat is great and we could probably write a shell script that we could
use in our (fun fact: someone else did this, check the bonus section!), but
Neovim is powerful enough to connect directly to the TCP server.&lt;&#x2F;p&gt;
&lt;p&gt;How? Neovim has an event loop, which is implemented using
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;libuv.org&quot;&gt;libuv&lt;&#x2F;a&gt;. libuv is probably the best event loop there in the
wild, but don&#x27;t quote me :) Besides shipping the event loop and all the libuv
code, Neovim also bundles &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;luvit&#x2F;luv&quot;&gt;luv&lt;&#x2F;a&gt; and expose the
loop as a Lua API, so we can use &lt;code&gt;vim.loop.&amp;lt;nice-async-things&amp;gt;&lt;&#x2F;code&gt;! Taylor
Thompson has written an amazing post about the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;teukka.tech&#x2F;vimloop.html&quot;&gt;using libuv in
Neovim&lt;&#x2F;a&gt;, go check it out if you&#x27;re curious :)&lt;&#x2F;p&gt;
&lt;p&gt;Among the utilities provided by libuv, there&#x27;s a tcp module which includes both
a TCP client and a TCP server! In our case we want to use a client, so we
invoke the &lt;code&gt;tcp_connect&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span style=&quot;color:#014a69;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;callback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#333366;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#014a69;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;53561
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#014a69;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;cb2ad753df0aca85&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#014a69;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.loop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;new_tcp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.loop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;tcp_connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since this is async world, we need to pass a callback that gets executed
whenever the connection happens (or in case something goes wrong). So the first
thing we do in our callback is check for errors, which looks familiar for Go
developers:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span style=&quot;color:#014a69;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;callback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;then
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;end

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#333366;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If there are no errors, it means we can send the contents of our file to the
remote server. We have the port and the token, but we also need the contents of
the buffer. So let&#x27;s grab the contents of the current buffer and send that to
the server, then read back the response and write it back to the buffer! This
time I&#x27;ll include the entire implementation of the callback, with some inline
comments:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span style=&quot;color:#014a69;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;callback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;then
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;end

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#898989;&quot;&gt;-- grab the contents of the buffer and add first row to match core_d&amp;#39;s protocol
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#014a69;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;bufnr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.api.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;nvim_get_current_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;()
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#014a69;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;first_line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#582b00;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;%s %s %s&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.loop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;cwd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;sample2.js&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#014a69;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.api.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;nvim_buf_get_lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;bufnr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#333366;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#582b00;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;first_line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#898989;&quot;&gt;-- start reading the response
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#014a69;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;&amp;#39;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.loop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;read_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;read_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;chunk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#898989;&quot;&gt;-- check if there was any error reading data back, if so, close the
    -- connection and report the error.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;read_err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;then
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.loop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;failed to read data from prettierd: &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;read_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;end

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#898989;&quot;&gt;-- libuv will call this callback with no data and no error when it&amp;#39;s done,
    -- so if there&amp;#39;s data, concatenate it into the final response. Otherwise it
    -- means we&amp;#39;re done, so invoke the `write_to_buf` to write the data back.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;chunk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;then
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;chunk
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;else
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.loop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;write_to_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;bufnr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;end
  end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#898989;&quot;&gt;-- write the request
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.loop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#582b00;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;concat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;))

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#898989;&quot;&gt;-- signal to the server that we&amp;#39;re done writing the request
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.loop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;shutdown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here&#x27;s a simple implementation of &lt;code&gt;write_to_buf&lt;&#x2F;code&gt;. The trickiest bit is
error handling: the way errors are reported isn&#x27;t great, but it&#x27;s acceptable:
if prettier fails, the last line contains a message in the format &lt;code&gt;# exit &amp;lt;code&amp;gt; ...&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span style=&quot;color:#014a69;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#877611;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;write_to_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;bufnr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#014a69;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;new_lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#898989;&quot;&gt;-- check for errors
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#582b00;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;new_lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;new_lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;^# exit %d+&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;then
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#582b00;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7a7025;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;failed to format with prettier: %s&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;end

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#898989;&quot;&gt;-- write contents
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.api.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;nvim_buf_set_lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;bufnr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#333366;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;new_lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you can throw all of that in a &lt;code&gt;format()&lt;&#x2F;code&gt; function and invoke it on write!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; the code here is a simplified version of what I actually use. For
the actual config, including automatic process management, retries, error
handling and cursor positioning, checkout
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fsouza&#x2F;dotfiles&#x2F;blob&#x2F;20aa0be6d06224224a50d24c5b63929f16cdb7da&#x2F;nvim&#x2F;lua&#x2F;fsouza&#x2F;plugin&#x2F;prettierd.lua#L56&quot;&gt;prettierd.lua&lt;&#x2F;a&gt;
in my dotfiles repo.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;not-just-typescript-and-javascript&quot;&gt;Not just TypeScript and JavaScript&lt;&#x2F;h2&gt;
&lt;p&gt;Users of prettier are aware of this, but prettier is not just about JavaScript
and TypeScript, it can be used with many other file formats, including HTML,
Markdown, CSS, YAML, JSON and others. Check the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;prettier.io&#x2F;docs&#x2F;en&#x2F;options.html#parser&quot;&gt;parser configuration in
prettier docs&lt;&#x2F;a&gt; for a full
list, and keep in mind that additional file types can be added via plugins!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bonus-using-it-on-the-command-line-with-prettierme&quot;&gt;Bonus: using it on the command line with prettierme&lt;&#x2F;h2&gt;
&lt;p&gt;If you want to use Vim instead of Neovim, or don&#x27;t want to maintain a TCP
client in your editor configuration, you can leverage &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruyadorno&#x2F;prettierme&quot;&gt;Ruy Adorno&#x27;s
prettierme&lt;&#x2F;a&gt; to use a command line
interface that is more similar to the standard prettier interface. prettierme
is basically a wrapper around our &lt;code&gt;netcat&lt;&#x2F;code&gt; example.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Splinter: Python tool for acceptance tests on web applications</title>
		<published>2011-05-14T00:00:00+00:00</published>
		<updated>2011-05-14T00:00:00+00:00</updated>
		<link href="https://blog.fsouza.dev/splinter-python-tool-for-acceptance/" type="text/html"/>
		<id>https://blog.fsouza.dev/splinter-python-tool-for-acceptance/</id>
		<content type="html">&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jnicklas&#x2F;capybara&quot;&gt;Capybara&lt;&#x2F;a&gt; and
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;brynary&#x2F;webrat&quot;&gt;Webrat&lt;&#x2F;a&gt; are great Ruby tools for acceptance
tests. A few months ago, we started a great tool for acceptance tests in
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;python.org&#x2F;&quot;&gt;Python&lt;&#x2F;a&gt; web applications, called
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;splinter.rtfd.org&quot;&gt;Splinter&lt;&#x2F;a&gt;. There are many acceptance test
tools on Python world: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;seleniumhq.org&#x2F;&quot;&gt;Selenium&lt;&#x2F;a&gt;,
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;idealistdev&#x2F;alfajor&quot;&gt;Alfajor&lt;&#x2F;a&gt;,
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.getwindmill.com&#x2F;&quot;&gt;Windmill&lt;&#x2F;a&gt;,
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;wwwsearch.sourceforge.net&#x2F;mechanize&#x2F;&quot;&gt;Mechanize&lt;&#x2F;a&gt;,
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pypi.python.org&#x2F;pypi&#x2F;zope.testbrowser&quot;&gt;zope.testbrowser&lt;&#x2F;a&gt;, etc.
Splinter was not created to be another acceptance tool, but an abstract layer
over other tools, its goal is provide a unique API that make acceptance testing
easier and funnier.&lt;&#x2F;p&gt;
&lt;p&gt;In this post, I will show some basic usage of Splinter for simple web
application tests. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cobrateam&#x2F;splinter&quot;&gt;Splinter&lt;&#x2F;a&gt; is a tool
useful on tests of any web application. You can even test a Java web
application using Splinter. This post example is a &amp;quot;test&amp;quot; of a Facebook
feature, just because I want to focus on how to use Splinter, not on how to
write a web application. The feature to be tested is the creation of an event
(the Splinter sprint), following all the flow: first the user will login on
Facebook, then click on &amp;quot;Events&amp;quot; menu item, then click on &amp;quot;Create an Event&amp;quot;
button, enter all event information and click on &amp;quot;Create event&amp;quot; button. So,
let’s do it…&lt;&#x2F;p&gt;
&lt;p&gt;First step is create a
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;splinter.readthedocs.io&#x2F;en&#x2F;latest&#x2F;api&#x2F;driver-and-element-api.html#module-splinter.browser&quot;&gt;Browser&lt;&#x2F;a&gt;
instance, which will provide method for interactions with browser (where the
browser is: Firefox, Chrome, etc.). The code we need for it is very simple:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#010101;&quot;&gt;browser &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;Browser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;firefox&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Browser&lt;&#x2F;code&gt; is a class and its constructor receives the driver to be used with
that instance. Nowadays, there are three drivers for Splinter: &lt;code&gt;firefox&lt;&#x2F;code&gt;,
&lt;code&gt;chrome&lt;&#x2F;code&gt; and &lt;code&gt;zope.testbrowser&lt;&#x2F;code&gt;. We are using Firefox, and you can easily use
Chrome by simply changing the driver from &lt;code&gt;firefox&lt;&#x2F;code&gt; to &lt;code&gt;chrome&lt;&#x2F;code&gt;. It’s also very
simple to add another driver to Splinter, and I plan to cover how to do that in
another blog post here.&lt;&#x2F;p&gt;
&lt;p&gt;A new browser session is started when we got the &lt;code&gt;browser&lt;&#x2F;code&gt; object, and this is
the object used for Firefox interactions. Let&#x27;s start a new event on Facebook,
the Splinter Sprint. First of all, we need to &lt;em&gt;visit&lt;&#x2F;em&gt; the Facebook homepage.
There is a &lt;code&gt;visit&lt;&#x2F;code&gt; method on Browser class, so we can use it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#010101;&quot;&gt;browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;visit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;www.facebook.com&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;visit&lt;&#x2F;code&gt; is a blocking operation: it waits for page to load, then we can
navigate, click on links, fill forms, etc. Now we have Facebook homepage opened
on browser, and you probably know that we need to login on Facebook page, but
what if we are already logged in? So, let&#x27;s create a method that login on
Facebook with provided authentication data only the user is not logged in
(imagine we are on a &lt;code&gt;Test&lt;&#x2F;code&gt;Case class):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#016692;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a15001;&quot;&gt;do_login_if_need&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;is_element_present_by_css&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;div.menu_login_container&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;email&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, username)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;pass&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, password)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;find_by_css&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;div.menu_login_container input[type=&amp;quot;submit&amp;quot;]&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;).first.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;()
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;.browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;is_element_present_by_css&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;li#navAccount&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What was made here? First of all, the method checks if there is an element
present on the page, using a CSS selector. It checks for a &lt;code&gt;div&lt;&#x2F;code&gt; that contains
the &lt;em&gt;username&lt;&#x2F;em&gt; and &lt;em&gt;password&lt;&#x2F;em&gt; fields. If that div is present, we tell the
browser object to fill those fields, then find the &lt;code&gt;submit&lt;&#x2F;code&gt; button and click on
it. The last line is an assert to guarantee that the login was successful and
the current page is the Facebook homepage (by checking the presence of
“Account” &lt;code&gt;li&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;We could also &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;splinter.rtfd.org&#x2F;en&#x2F;latest&#x2F;finding.html&quot;&gt;find elements&lt;&#x2F;a&gt;
by its texts, labels or whatever appears on screen, but remember: Facebook is
an internationalized web application, and we can’t test it using only a
specific language.&lt;&#x2F;p&gt;
&lt;p&gt;Okay, now we know how to visit a webpage, check if an element is present, fill
a form and click on a button. We&#x27;re also logged in on Facebook and can finally
go ahead create the &lt;em&gt;Splinter sprint&lt;&#x2F;em&gt; event. So, here is the event creation
flow, for a user:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;On Facebook homepage, click on “Events” link, of left menu&lt;&#x2F;li&gt;
&lt;li&gt;The “Events” page will load, so click on “Create an Event” button&lt;&#x2F;li&gt;
&lt;li&gt;The user see a page with a form to create an event&lt;&#x2F;li&gt;
&lt;li&gt;Fill the date and chose the time&lt;&#x2F;li&gt;
&lt;li&gt;Define what is the name of the event, where it will happen and write a short
description for it&lt;&#x2F;li&gt;
&lt;li&gt;Invite some guests&lt;&#x2F;li&gt;
&lt;li&gt;Upload a picture for the event&lt;&#x2F;li&gt;
&lt;li&gt;Click on “Create Event” button&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We are going to do all these steps, except the 6th, because the Splinter Sprint
will just be a public event and we don’t need to invite anybody. There are some
boring AJAX requests on Facebook that we need to deal, so there is not only
Splinter code for those steps above. First step is click on “Events” link. All
we need to do is &lt;code&gt;find&lt;&#x2F;code&gt; the link and &lt;code&gt;click&lt;&#x2F;code&gt; on it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#010101;&quot;&gt;browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;find_by_css&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;li#navItem_events a&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;).first.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;find_by_css&lt;&#x2F;code&gt; method takes a CSS selector and returns an
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;splinter.rtfd.org&#x2F;en&#x2F;latest&#x2F;api&#x2F;element-list.html#splinter.element_list.ElementList&quot;&gt;ElementList&lt;&#x2F;a&gt;.
So, we get the first element of the list (even when the selector returns only
an element, the return type is still a &lt;em&gt;list&lt;&#x2F;em&gt;) and click on it. Like &lt;code&gt;visit&lt;&#x2F;code&gt;
method, &lt;code&gt;click&lt;&#x2F;code&gt; is a blocking operation: the driver will only listen for new
actions when the request is finished (the page is loaded).&lt;&#x2F;p&gt;
&lt;p&gt;We’re finally on &amp;quot;new event&amp;quot; page, and there is a form on screen waiting for data of the &lt;em&gt;Splinter Sprint&lt;&#x2F;em&gt;. Let’s fill the form. Here is the code for it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#010101;&quot;&gt;browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;event_startIntlDisplay&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;5&#x2F;21&#x2F;2011&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;start_time_min&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;480&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;name&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;Splinter sprint&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;location&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;Rio de Janeiro, Brazil&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;desc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;For more info, check out the #cobratem channel on freenode!&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is it: the event is going to happen on May 21th 2011, at 8:00 in the
morning (480 minutes). As we know, the event name is &lt;em&gt;Splinter sprint&lt;&#x2F;em&gt;, and we
are going to join some guys down here in Brazil. We filled out the form using
&lt;code&gt;fill&lt;&#x2F;code&gt; and &lt;code&gt;select&lt;&#x2F;code&gt; methods.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;fill&lt;&#x2F;code&gt; method is used to fill a &amp;quot;fillable&amp;quot; field (a textarea, an input,
etc.). It receives two strings: the first is the &lt;em&gt;name&lt;&#x2F;em&gt; of the field to fill
and the second is the &lt;em&gt;value&lt;&#x2F;em&gt; that will fill the field. &lt;code&gt;select&lt;&#x2F;code&gt; is used to
select an option in a select element (a “combo box”). It also receives two
string parameters: the first is the &lt;em&gt;name&lt;&#x2F;em&gt; of the select element, and the
second is the &lt;em&gt;value&lt;&#x2F;em&gt; of the option being selected.&lt;&#x2F;p&gt;
&lt;p&gt;Imagine you have the following select element:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#00528b;&quot;&gt;&amp;lt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bc4d00;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#00528b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;gender&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#00528b;&quot;&gt;&amp;gt;
    &amp;lt;option &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bc4d00;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#00528b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;m&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#00528b;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;Male&lt;&#x2F;span&gt;&lt;span style=&quot;color:#00528b;&quot;&gt;&amp;lt;&#x2F;option&amp;gt;
    &amp;lt;option &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bc4d00;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#00528b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;f&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#00528b;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;Female&lt;&#x2F;span&gt;&lt;span style=&quot;color:#00528b;&quot;&gt;&amp;lt;&#x2F;option&amp;gt;
&amp;lt;&#x2F;select&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To select “Male”, you would call the select method this way:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#010101;&quot;&gt;browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;gender&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;m&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last action before click on “Create Event” button is upload a picture for
the event. On new event page, Facebook loads the file field for picture
uploading inside an &lt;code&gt;iframe&lt;&#x2F;code&gt;, so we need to switch to this frame and interact
with the form present inside the frame. To show the frame, we need to click on
“Add Event Photo” button and then switch to it, we already know how click on a
link:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#010101;&quot;&gt;browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;find_by_css&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;div.eventEditUpload a.uiButton&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;).first.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we click this link, Facebook makes an asynchronous request, which means
the driver does not stay blocked waiting the end of the request, so if we try
to interact with the frame BEFORE it appears, we will get an
&lt;code&gt;ElementDoesNotExist&lt;&#x2F;code&gt; exception. Splinter provides the &lt;code&gt;is_element_present&lt;&#x2F;code&gt;
method that receives an argument called &lt;code&gt;wait_time&lt;&#x2F;code&gt;, which is the time Splinter
will wait for the element to appear on the screen. If the element does not
appear on screen, we can’t go on, so we can assume the test failed (remember we
are testing a Facebook feature):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#016692;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;is_element_present_by_css&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;iframe#upload_pic_frame&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;wait_time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;fail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;quot;The upload pic iframe did&amp;#39;n&amp;#39;t appear :(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;is_element_present_by_css&lt;&#x2F;code&gt; method takes a CSS selector and tries to find
an element using it. It also receives a &lt;code&gt;wait_time&lt;&#x2F;code&gt; parameter that indicates a
time out for the search of the element. So, if the &lt;code&gt;iframe&lt;&#x2F;code&gt; element with
&lt;em&gt;ID=”upload_pic_frame”&lt;&#x2F;em&gt; is not present or doesn’t appear in the screen after 10
seconds, the method returns &lt;code&gt;False&lt;&#x2F;code&gt;, otherwise it returns &lt;code&gt;True&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;&#x2F;strong&gt; &lt;code&gt;fail&lt;&#x2F;code&gt; is a pseudocode sample and doesn’t exist (if you’re
using &lt;code&gt;unittest&lt;&#x2F;code&gt; library, you can invoke &lt;code&gt;self.fail&lt;&#x2F;code&gt; in a TestCase, exactly
what I did in [complete snippet for this
example](https:&#x2F;&#x2F;github.com&#x2F;cobrateam&#x2F;splinter&#x2F;blob&#x2F;master&#x2F;samples&#x2F;test_facebook_events.py
&amp;quot;Snippet for creating a new event on Facebook using Splinter&amp;quot;), available at
Github).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Now we see the &lt;code&gt;iframe&lt;&#x2F;code&gt; element on screen and we can finally upload the
picture. Imagine we have a variable that contains the path of the picture (and
not a file object, &lt;code&gt;StringIO&lt;&#x2F;code&gt;, or something like this), and this variable name
is &lt;code&gt;picture_path&lt;&#x2F;code&gt;, this is the code we need:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#016692;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;get_iframe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;upload_pic_frame&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;frame:
    frame.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;attach_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;pic&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;, picture_path)
    time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8c008a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Splinter provides the &lt;code&gt;get_iframe&lt;&#x2F;code&gt; method that changes the context and returns
another objet to interact with the content of the frame. So we call the
&lt;code&gt;attach_file&lt;&#x2F;code&gt; method, who also receives two strings: the first is the &lt;em&gt;name&lt;&#x2F;em&gt; of
the input element and the second is the absolute &lt;em&gt;path&lt;&#x2F;em&gt; to the file being sent.
Facebook also uploads the picture asynchronously, but there’s no way to wait
some element to appear on screen, so I just put Python to sleep 10 seconds on
last line.&lt;&#x2F;p&gt;
&lt;p&gt;After finish all these steps, we can finally click on “Create Event” button and
asserts that Facebook created it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#010101;&quot;&gt;browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;find_by_css&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;label.uiButton input[type=&amp;quot;submit&amp;quot;]&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;).first.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;()
title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;browser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#696989;&quot;&gt;find_by_css&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;h1 span&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;).first.text
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#010101;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#016692;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#009f78;&quot;&gt;&amp;#39;Splinter sprint&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After create an event, Facebook redirects the browser to the event page, so we
can check if it really happened by asserting the header of the page. That’s
what the code above does: in the new event page, it click on submit button, and
after the redirect, get the text of a span element and asserts that this text
equals to &lt;em&gt;“Splinter sprint”&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That is it! This post was an overview on Splinter API. Check out the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cobrateam&#x2F;splinter&#x2F;blob&#x2F;master&#x2F;samples&#x2F;test_facebook_events.py&quot;&gt;complete
snippet&lt;&#x2F;a&gt;,
written as a test case and also check out &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cobrateam&#x2F;splinter&quot;&gt;Splinter repository at
Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
