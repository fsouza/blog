<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Francisco Souza</title>
	<link href="https://blog.fsouza.dev/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.fsouza.dev"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-02-12T00:00:00+00:00</updated>
	<id>https://blog.fsouza.dev/atom.xml</id>
	<entry xml:lang="en">
		<title>Making format-on-save fast with prettierd</title>
		<published>2021-02-12T00:00:00+00:00</published>
		<updated>2021-02-12T00:00:00+00:00</updated>
		<link href="https://blog.fsouza.dev/prettierd-neovim-format-on-save/" type="text/html"/>
		<id>https://blog.fsouza.dev/prettierd-neovim-format-on-save/</id>
		<content type="html">&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#x27;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.fsouza.dev&#x2F;prettierd-neovim-format-on-save&#x2F;#intro&quot;&gt;Intro&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.fsouza.dev&#x2F;prettierd-neovim-format-on-save&#x2F;#who-cares&quot;&gt;Who cares?!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.fsouza.dev&#x2F;prettierd-neovim-format-on-save&#x2F;#my-visual-studio-code-doesn-t-take-a-second-to-format-on-save-your-vim-is-trash&quot;&gt;&amp;quot;My Visual Studio Code doesn&#x27;t take a second to format-on-save, your Vim is trash&amp;quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.fsouza.dev&#x2F;prettierd-neovim-format-on-save&#x2F;#installing-and-starting-prettierd&quot;&gt;Installing and starting prettierd&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.fsouza.dev&#x2F;prettierd-neovim-format-on-save&#x2F;#integrating-neovim-with-prettierd&quot;&gt;Integrating Neovim with prettierd&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.fsouza.dev&#x2F;prettierd-neovim-format-on-save&#x2F;#not-just-typescript-and-javascript&quot;&gt;Not just TypeScript and JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.fsouza.dev&#x2F;prettierd-neovim-format-on-save&#x2F;#bonus-using-it-on-the-command-line-with-prettierme&quot;&gt;Bonus: using it on the command line with prettierme&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h2&gt;
&lt;p&gt;Back in June of 2020, when I was migrating my Neovim configuration to Lua and
to the native LSP client available in neovim 0.5.0, my main language at work
was TypeScript and we used &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;prettier.io&quot;&gt;prettier&lt;&#x2F;a&gt; to keep our code
formatted, and I had it configured to format-on-save with
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neoclide&#x2F;coc-prettier&quot;&gt;coc-prettier&lt;&#x2F;a&gt;. One of the first
issues I ran into was performance: saving files became deadly slow, to the
point where I gave up and disabled format-on-save.&lt;&#x2F;p&gt;
&lt;p&gt;The thing is: prettier is known to be a fast code formatter, and I didn&#x27;t have
the issue before, so what&#x27;s the  problem here? Is Neovim making prettier
slower? Is coc-prettier doing some magic shit?&lt;&#x2F;p&gt;
&lt;p&gt;Before we start looking into this, let&#x27;s see how prettier behaves when
formatting a somewhat large TypeScript file:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;％ wc -l sample.ts
     586 sample.ts
％ time npx prettier -w sample.ts
sample.ts 332ms
        0.85 real         0.91 user         0.11 sys
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s interesting that prettier reports that it took 332ms to format the file,
but &lt;code&gt;time&lt;&#x2F;code&gt; reports that the whole process took 850ms. Who&#x27;s lying?&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a look at multiple files:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;％ wc -l sample*.ts
     330 sample1.ts
     718 sample2.ts
     655 sample3.ts
    2511 sample4.ts
     601 sample5.ts
    4815 total
％ time npx prettier -w sample1.ts
sample1.ts 290ms
        0.93 real         0.88 user         0.11 sys
％ time npx prettier -w sample2.ts
sample2.ts 358ms
        1.02 real         1.04 user         0.12 sys
％ time npx prettier -w sample3.ts
sample3.ts 330ms
        0.97 real         0.95 user         0.13 sys
％ time npx prettier -w sample4.ts
sample4.ts 648ms
        1.27 real         1.48 user         0.13 sys
％ time npx prettier -w sample5.ts
sample5.ts 375ms
        1.00 real         1.00 user         0.12 sys
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how formatting &lt;code&gt;sample2.ts&lt;&#x2F;code&gt; and &lt;code&gt;sample4.ts&lt;&#x2F;code&gt; takes more than 1 second in
total! Also interesting is the fact that even though &lt;code&gt;sample1.ts&lt;&#x2F;code&gt; is less the
half the size of &lt;code&gt;sample2.ts&lt;&#x2F;code&gt;, formatting &lt;code&gt;sample2.ts&lt;&#x2F;code&gt; does not take twice as
much time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;who-cares&quot;&gt;Who cares?!&lt;&#x2F;h2&gt;
&lt;p&gt;OK, let&#x27;s take a step back and reflect: who cares if prettier is slow to format
my files? I could run it on a git hook or something like that and not even
notice.&lt;&#x2F;p&gt;
&lt;p&gt;As I mentioned before, I was running format-on-save in Neovim, with a simple
setup, not very fancy:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;vimscript&quot; class=&quot;language-vimscript &quot;&gt;&lt;code class=&quot;language-vimscript&quot; data-lang=&quot;vimscript&quot;&gt;autocmd BufWritePre *.ts execute &quot;silent %!npx prettier --stdin-filepath &#x27;&quot; . expand(&#x27;%:p&#x27;) . &quot;&#x27;&quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fsouza&#x2F;dotfiles&#x2F;blob&#x2F;0b6d3daaa844796f916b3f056a66af0e25a76c3c&#x2F;autoload&#x2F;fsouza&#x2F;prettier.vim#L19-L30&quot;&gt;(it was a bit fancier than that, but not by much)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So, imagine you&#x27;re using Neovim and every time you save the file you have to
wait 1 second. You&#x27;d be mad, right?! There must be a better way...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-visual-studio-code-doesn-t-take-a-second-to-format-on-save-your-vim-is-trash&quot;&gt;&amp;quot;My Visual Studio Code doesn&#x27;t take a second to format-on-save, your Vim is trash&amp;quot;&lt;&#x2F;h2&gt;
&lt;p&gt;To be fair, coc-prettier was pretty fast too. How is that even possible?&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s go back to our sample files, but this time let&#x27;s see what prettier does
if we pass all 5 files to it instead of invoking it 5 times:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;％ time npx prettier -w *.ts
sample1.ts 248ms
sample2.ts 205ms
sample3.ts 110ms
sample4.ts 327ms
sample5.ts 79ms
        1.61 real         2.09 user         0.15 sys
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This time &lt;code&gt;sample2.ts&lt;&#x2F;code&gt; is faster than &lt;code&gt;sample1.ts&lt;&#x2F;code&gt;, even though it&#x27;s twice as
large! What&#x27;s going on? Turns out &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prettier&#x2F;prettier&#x2F;issues&#x2F;3386&quot;&gt;prettier is slow to
start&lt;&#x2F;a&gt;, both because of
overhead introduced by node.js and prettier itself (it has tons of plugins and
dependencies).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;And how is it fast to format-on-save using VSCode&#x2F;coc-prettier?&lt;&#x2F;strong&gt; Simple:
both coc-prettier and Visual Studio Code are long-running node.js processes,
which host prettier as a library, therefore paying the initialization cost
once.&lt;&#x2F;p&gt;
&lt;p&gt;The solution is simple: we need a long-running node.js process! If you read
through the issue about slow startups in prettier, someone suggests using
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;josephfrazier&#x2F;prettier_d&quot;&gt;prettier_d&lt;&#x2F;a&gt;, but after looking at
how large that project was, I was a bit scared.&lt;&#x2F;p&gt;
&lt;p&gt;Doing some more research, I found
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mantoni&#x2F;eslint_d.js&#x2F;&quot;&gt;eslint_d.js&lt;&#x2F;a&gt;, which solves a similar
issue for eslint, by introducing a daemon which supports binding on a TCP
socket! And the author of eslint_d.js extracted its core functionality in a
library called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mantoni&#x2F;core_d.js&quot;&gt;core_d.js&lt;&#x2F;a&gt;. So I figured
I could combine that library with prettier and make
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fsouza&#x2F;prettierd&quot;&gt;prettierd&lt;&#x2F;a&gt;, a TCP-enabled daemon for
formatting code using prettier!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing-and-starting-prettierd&quot;&gt;Installing and starting prettierd&lt;&#x2F;h2&gt;
&lt;p&gt;The code for prettierd is pretty boring, as it is basically a tiny wrapper
around core_d to invoke the proper prettier functions whenever the server
receives a &amp;quot;request&amp;quot;. The two important things to know about are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;You can install it with npm and start it with &lt;code&gt;prettierd start&lt;&#x2F;code&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre&gt;&lt;code&gt;％ npm install -g @fsouza&#x2F;prettierd
％ prettierd start
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alternatively you can do both things with &lt;code&gt;npx&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;％ npx -p @fsouza&#x2F;prettierd prettierd start
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;When it starts, prettierd writes a file with its port number and token&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre&gt;&lt;code&gt;％ cat ~&#x2F;.prettierd
53561 cb2ad753df0aca85
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This means that prettierd is running on port 53561 and we can use the token
&lt;code&gt;cb2ad753df0aca85&lt;&#x2F;code&gt; in our requests to format our source code.&lt;&#x2F;p&gt;
&lt;p&gt;core_d&#x27;s protocol is pretty simple:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&lt;token&gt; &lt;working-dir&gt; &lt;file-name&gt;\n
&lt;file-content&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For example, we can use netcat:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;％ echo &quot;cb2ad753df0aca85 $PWD sample2.ts&quot; | cat - sample2.ts | &#x2F;usr&#x2F;bin&#x2F;time nc localhost 53561 &gt;sample2-formatted.ts
        0.14 real         0.00 user         0.00 sys
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remember how formatting &lt;code&gt;sample2.ts&lt;&#x2F;code&gt; took over 1 second? Not anymore. :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;integrating-neovim-with-prettierd&quot;&gt;Integrating Neovim with prettierd&lt;&#x2F;h2&gt;
&lt;p&gt;Using netcat is great and we could probably write a shell script that we could
use in our (fun fact: someone else did this, check the bonus section!), but
Neovim is powerful enough to connect directly to the TCP server.&lt;&#x2F;p&gt;
&lt;p&gt;How? Neovim has an event loop, which is implemented using
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;libuv.org&quot;&gt;libuv&lt;&#x2F;a&gt;. libuv is probably the best event loop there in the
wild, but don&#x27;t quote me :) Besides shipping the event loop and all the libuv
code, Neovim also bundles &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;luvit&#x2F;luv&quot;&gt;luv&lt;&#x2F;a&gt; and expose the
loop as a Lua API, so we can use &lt;code&gt;vim.loop.&amp;lt;nice-async-things&amp;gt;&lt;&#x2F;code&gt;! Taylor
Thompson has written an amazing post about the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;teukka.tech&#x2F;vimloop.html&quot;&gt;using libuv in
Neovim&lt;&#x2F;a&gt;, go check it out if you&#x27;re curious :)&lt;&#x2F;p&gt;
&lt;p&gt;Among the utilities provided by libuv, there&#x27;s a tcp module which includes both
a TCP client and a TCP server! In our case we want to use a client, so we
invoke the &lt;code&gt;tcp_connect&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; class=&quot;language-lua &quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;local callback = ...
local port = 53561
local token = &#x27;cb2ad753df0aca85&#x27;
local client = vim.loop.new_tcp()
vim.loop.tcp_connect(client, &#x27;127.0.0.1&#x27;, port, callback)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since this is async world, we need to pass a callback that gets executed
whenever the connection happens (or in case something goes wrong). So the first
thing we do in our callback is check for errors, which looks familiar for Go
developers:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; class=&quot;language-lua &quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;local callback = function(err)
  if err then
    error(err)
  end

  ...
end
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If there are no errors, it means we can send the contents of our file to the
remote server. We have the port and the token, but we also need the contents of
the buffer. So let&#x27;s grab the contents of the current buffer and send that to
the server, then read back the response and write it back to the buffer! This
time I&#x27;ll include the entire implementation of the callback, with some inline
comments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; class=&quot;language-lua &quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;local callback = function(err)
  if err then
    error(err)
  end

  -- grab the contents of the buffer and add first row to match core_d&#x27;s protocol
  local bufnr = vim.api.nvim_get_current_buf()
  local first_line = string.format(&#x27;%s %s %s&#x27;, token, vim.loop.cwd(), &#x27;sample2.js&#x27;)
  local lines = vim.api.nvim_buf_get_lines(bufnr, 0, -1, true)
  table.insert(lines, 1, first_line)

  -- start reading the response
  local response = &#x27;&#x27;
  vim.loop.read_start(client, function(read_err, chunk)
    -- check if there was any error reading data back, if so, close the
    -- connection and report the error.
    if read_err then
      vim.loop.close(client)
      error(&#x27;failed to read data from prettierd: &#x27; .. read_err)
    end

    -- libuv will call this callback with no data and no error when it&#x27;s done,
    -- so if there&#x27;s data, concatenate it into the final response. Otherwise it
    -- means we&#x27;re done, so invoke the `write_to_buf` to write the data back.
    if chunk then
      response = response .. chunk
    else
      vim.loop.close(client)
      write_to_buf(response, bufnr)
    end
  end)

  -- write the request
  vim.loop.write(client, table.concat(lines, &#x27;\n&#x27;))

  -- signal to the server that we&#x27;re done writing the request
  vim.loop.shutdown(client)
end
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here&#x27;s a simple implementation of &lt;code&gt;write_to_buf&lt;&#x2F;code&gt;. The trickiest bit is
error handling: the way errors are reported isn&#x27;t great, but it&#x27;s acceptable:
if prettier fails, the last line contains a message in the format &lt;code&gt;# exit &amp;lt;code&amp;gt; ...&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; class=&quot;language-lua &quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;local function write_to_buf(data, bufnr)
  local new_lines = vim.split(data, &#x27;\n&#x27;)

  -- check for errors
  if string.find(new_lines[#new_lines], &#x27;^# exit %d+&#x27;) then
    error(string.format(&#x27;failed to format with prettier: %s&#x27;, data))
  end

  -- write contents
  vim.api.nvim_buf_set_lines(bufnr, 0, -1, false, new_lines)
end
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you can throw all of that in a &lt;code&gt;format()&lt;&#x2F;code&gt; function and invoke it on write!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; the code here is a simplified version of what I actually use. For
the actual config, including automatic process management, retries, error
handling and cursor positioning, checkout
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fsouza&#x2F;dotfiles&#x2F;blob&#x2F;20aa0be6d06224224a50d24c5b63929f16cdb7da&#x2F;nvim&#x2F;lua&#x2F;fsouza&#x2F;plugin&#x2F;prettierd.lua#L56&quot;&gt;prettierd.lua&lt;&#x2F;a&gt;
in my dotfiles repo.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;not-just-typescript-and-javascript&quot;&gt;Not just TypeScript and JavaScript&lt;&#x2F;h2&gt;
&lt;p&gt;Users of prettier are aware of this, but prettier is not just about JavaScript
and TypeScript, it can be used with many other file formats, including HTML,
Markdown, CSS, YAML, JSON and others. Check the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;prettier.io&#x2F;docs&#x2F;en&#x2F;options.html#parser&quot;&gt;parser configuration in
prettier docs&lt;&#x2F;a&gt; for a full
list, and keep in mind that additional file types can be added via plugins!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bonus-using-it-on-the-command-line-with-prettierme&quot;&gt;Bonus: using it on the command line with prettierme&lt;&#x2F;h2&gt;
&lt;p&gt;If you want to use Vim instead of Neovim, or don&#x27;t want to maintain a TCP
client in your editor configuration, you can leverage &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ruyadorno&#x2F;prettierme&quot;&gt;Ruy Adorno&#x27;s
prettierme&lt;&#x2F;a&gt; to use a command line
interface that is more similar to the standard prettier interface. prettierme
is basically a wrapper around our &lt;code&gt;netcat&lt;&#x2F;code&gt; example.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Using Juju to orchestrate CentOS-based cloud services</title>
		<published>2012-07-28T00:00:00+00:00</published>
		<updated>2012-07-28T00:00:00+00:00</updated>
		<link href="https://blog.fsouza.dev/using-juju-to-orchestrate-centos-based/" type="text/html"/>
		<id>https://blog.fsouza.dev/using-juju-to-orchestrate-centos-based/</id>
		<content type="html">&lt;p&gt;Earlier this week I had the opportunity to meet &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;kylemacdonald&#x2F;&quot;&gt;Kyle
MacDonald&lt;&#x2F;a&gt;, head of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;cloud.ubuntu.com&#x2F;&quot;&gt;Ubuntu
Cloud&lt;&#x2F;a&gt;, during &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;fisl.org.br&#x2F;13&quot;&gt;FISL&lt;&#x2F;a&gt;, and he
was surprised when we told him we are &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;lists.ubuntu.com&#x2F;archives&#x2F;juju-dev&#x2F;2012-June&#x2F;000001.html&quot;&gt;using Juju with
CentOS&lt;&#x2F;a&gt; at
Globo.com. Then I decided to write this post explaining how we came up with a
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;globocom&#x2F;juju-centos-6&quot;&gt;patched version of Juju&lt;&#x2F;a&gt; that
allows us to have CentOS clouds managed by Juju.&lt;a name=&quot;more&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For those who doesn&#x27;t know Juju, it&#x27;s a service orchestration tool, focused on
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;DevOps&quot;&gt;devops&lt;&#x2F;a&gt; &amp;quot;development method&amp;quot;. It allows
you to deploy services on clouds, local machine and even bare metal machines
(using Canonical&#x27;s MAAS).&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s based on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;juju.ubuntu.com&#x2F;docs&#x2F;charm-store.html&quot;&gt;charms&lt;&#x2F;a&gt; and very
straightforward to use. Here is a very basic set of commands with which you can
deploy a Wordpress related to a MySQL service:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;% juju bootstrap
% juju deploy mysql
% juju deploy wordpress
% juju add-relation wordpress mysql
% juju expose wordpress
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These commands will boostrap the environment, setting up a bootstrap machine
which will manage your services; deploy mysql and wordpress instances; add a
relation between them; and expose the wordpress port. The voilà, we have a
wordpress deployed, and ready to serve our posts. Amazing, huh?&lt;&#x2F;p&gt;
&lt;p&gt;But there is an issue: although you can install the &lt;code&gt;juju&lt;&#x2F;code&gt; command line tool in
almost any OS (including Mac OS), right now you are able do deploy only
Ubuntu-based services (you must use an Ubuntu instance or container).&lt;&#x2F;p&gt;
&lt;p&gt;To change this behavior, and enable Juju to spawn CentOS instances (and
containers, if you have a CentOS lxc template), we need to develop and apply
some changes to Juju and
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;help.ubuntu.com&#x2F;community&#x2F;CloudInit&quot;&gt;cloud-init&lt;&#x2F;a&gt;. Juju uses cloud-init
to spawn machines with proper dependencies set up, and it&#x27;s based on modules.
All we need to do, is add a module able to install rpm packages using &lt;code&gt;yum&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cloud-init&lt;&#x2F;code&gt; modules are Python modules that starts with &lt;code&gt;cc_&lt;&#x2F;code&gt; and implement a
&lt;code&gt;handle&lt;&#x2F;code&gt; function (for example, a module called &amp;quot;yum_packages&amp;quot; would be written
to a file called &lt;code&gt;cc_yum_packages.py&lt;&#x2F;code&gt;). So, here is the code for the module
&lt;code&gt;yum_packages&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import subprocess
import traceback

from cloudinit import CloudConfig, util

frequency = CloudConfig.per_instance

def yum_install(packages):
    cmd = [&quot;yum&quot;, &quot;--quiet&quot;, &quot;--assumeyes&quot;, &quot;install&quot;]
    cmd.extend(packages)
    subprocess.check_call(cmd)

def handle(_name, cfg, _cloud, log, args):
    pkglist = util.get_cfg_option_list_or_str(cfg, &quot;packages&quot;, [])

    if pkglist:
        try:
            yum_install(pkglist)
        except subprocess.CalledProcessError:
            log.warn(&quot;Failed to install yum packages: %s&quot; % pkglist)
            log.debug(traceback.format_exc())
            raise

    return True
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The module installs all packages listed in cloud-init yaml file. If we want to install &lt;code&gt;emacs-nox&lt;&#x2F;code&gt; package, we would write this yaml file and use it as user data in the instance:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;#cloud-config
modules:
 - yum_packages
packages: [emacs-nox]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;cloud-init&lt;&#x2F;code&gt; already works on Fedora, with Python 2.7, but to work on CentOS 6, with Python 2.6, it needs a patch:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;--- cloudinit&#x2F;util.py 2012-05-22 12:18:21.000000000 -0300
+++ cloudinit&#x2F;util.py 2012-05-31 12:44:24.000000000 -0300
@@ -227,7 +227,7 @@
         stderr=subprocess.PIPE, stdin=subprocess.PIPE)
     out, err = sp.communicate(input_)
     if sp.returncode is not 0:
-        raise subprocess.CalledProcessError(sp.returncode, args, (out, err))
+        raise subprocess.CalledProcessError(sp.returncode, args)
     return(out, err)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;ve packet up this module and this patch in a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;globocom&#x2F;cloudinit-centos-6&quot;&gt;RPM
package&lt;&#x2F;a&gt; that must be
pre-installed in the lxc template and AMI images. Now, we need to change Juju
in order to make it use the &lt;code&gt;yum_packages&lt;&#x2F;code&gt; module, and include all RPM packages
that we need to install when the machine borns.&lt;&#x2F;p&gt;
&lt;p&gt;Is Juju, there is a class that is responsible for building and rendering the
YAML file used by cloud-init. We can extend it and change only two methods:
&lt;code&gt;_collect_packages&lt;&#x2F;code&gt;, that returns the list of packages that will be installed
in the machine after it is spawned; and &lt;code&gt;render&lt;&#x2F;code&gt; that returns the file itself.
Here is our &lt;code&gt;CentOSCloudInit&lt;&#x2F;code&gt; class (within the patch):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;diff -u juju-0.5-bzr531.orig&#x2F;juju&#x2F;providers&#x2F;common&#x2F;cloudinit.py juju-0.5-bzr531&#x2F;juju&#x2F;providers&#x2F;common&#x2F;cloudinit.py
--- juju-0.5-bzr531.orig&#x2F;juju&#x2F;providers&#x2F;common&#x2F;cloudinit.py 2012-05-31 15:42:17.480769486 -0300
+++ juju-0.5-bzr531&#x2F;juju&#x2F;providers&#x2F;common&#x2F;cloudinit.py 2012-05-31 15:55:13.342884919 -0300
@@ -324,3 +324,32 @@
             &quot;machine-id&quot;: self._machine_id,
             &quot;juju-provider-type&quot;: self._provider_type,
             &quot;juju-zookeeper-hosts&quot;: self._join_zookeeper_hosts()}
+
+
+class CentOSCloudInit(CloudInit):
+
+    def _collect_packages(self):
+        packages = [
+            &quot;bzr&quot;, &quot;byobu&quot;, &quot;tmux&quot;, &quot;python-setuptools&quot;, &quot;python-twisted&quot;,
+            &quot;python-txaws&quot;, &quot;python-zookeeper&quot;, &quot;python-devel&quot;, &quot;juju&quot;]
+        if self._zookeeper:
+            packages.extend([
+                &quot;zookeeper&quot;, &quot;libzookeeper&quot;, &quot;libzookeeper-devel&quot;])
+        return packages
+
+    def render(self):
+        &quot;&quot;&quot;Get content for a cloud-init file with appropriate specifications.
+
+        :rtype: str
+
+        :raises: :exc:`juju.errors.CloudInitError` if there isn&#x27;t enough
+            information to create a useful cloud-init.
+        &quot;&quot;&quot;
+        self._validate()
+        return format_cloud_init(
+            self._ssh_keys,
+            packages=self._collect_packages(),
+            repositories=self._collect_repositories(),
+            scripts=self._collect_scripts(),
+            data=self._collect_machine_data(),
+            modules=[&quot;ssh&quot;, &quot;yum_packages&quot;, &quot;runcmd&quot;])
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The other change we need is in the &lt;code&gt;format_cloud_init&lt;&#x2F;code&gt; function, in order to
make it recognize the &lt;code&gt;modules&lt;&#x2F;code&gt; parameter that we used above, and tell
cloud-init to not run &lt;code&gt;apt-get&lt;&#x2F;code&gt; (update nor upgrade). Here is the patch:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;diff -ur juju-0.5-bzr531.orig&#x2F;juju&#x2F;providers&#x2F;common&#x2F;utils.py juju-0.5-bzr531&#x2F;juju&#x2F;providers&#x2F;common&#x2F;utils.py
--- juju-0.5-bzr531.orig&#x2F;juju&#x2F;providers&#x2F;common&#x2F;utils.py 2012-05-31 15:42:17.480769486 -0300
+++ juju-0.5-bzr531&#x2F;juju&#x2F;providers&#x2F;common&#x2F;utils.py 2012-05-31 15:44:06.605014021 -0300
@@ -85,7 +85,7 @@

 def format_cloud_init(
-    authorized_keys, packages=(), repositories=None, scripts=None, data=None):
+    authorized_keys, packages=(), repositories=None, scripts=None, data=None, modules=None):
     &quot;&quot;&quot;Format a user-data cloud-init file.

     This will enable package installation, and ssh access, and script
@@ -117,8 +117,8 @@
         structure.
     &quot;&quot;&quot;
     cloud_config = {
-        &quot;apt-update&quot;: True,
-        &quot;apt-upgrade&quot;: True,
+        &quot;apt-update&quot;: False,
+        &quot;apt-upgrade&quot;: False,
         &quot;ssh_authorized_keys&quot;: authorized_keys,
         &quot;packages&quot;: [],
         &quot;output&quot;: {&quot;all&quot;: &quot;| tee -a &#x2F;var&#x2F;log&#x2F;cloud-init-output.log&quot;}}
@@ -136,6 +136,11 @@
     if scripts:
         cloud_config[&quot;runcmd&quot;] = scripts

+    if modules:
+        cloud_config[&quot;modules&quot;] = modules
+
     output = safe_dump(cloud_config)
     output = &quot;#cloud-config\n%s&quot; % (output)
     return output
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This patch is also packed up within
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;globocom&#x2F;juju-centos-6&quot;&gt;juju-centos-6&lt;&#x2F;a&gt; repository, which
provides sources for building RPM packages for juju, and also some pre-built
RPM packages.&lt;&#x2F;p&gt;
&lt;p&gt;Now just build an AMI image with &lt;code&gt;cloudinit&lt;&#x2F;code&gt; pre-installed, configure your juju
&lt;code&gt;environments.yaml&lt;&#x2F;code&gt; file to use this image in the environment and you are ready
to deploy cloud services on CentOS machines using Juju!&lt;&#x2F;p&gt;
&lt;p&gt;Some caveats:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Juju needs a user called &lt;code&gt;ubuntu&lt;&#x2F;code&gt; to interact with its machines, so you will
need to create this user in your CentOS AMI&#x2F;template.&lt;&#x2F;li&gt;
&lt;li&gt;You need to host all RPM packages for
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;globocom&#x2F;juju-centos-6&quot;&gt;juju&lt;&#x2F;a&gt;,
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;globocom&#x2F;cloudinit-centos-6&quot;&gt;cloud-init&lt;&#x2F;a&gt; and following
dependencies in some &lt;code&gt;yum&lt;&#x2F;code&gt; repository (I haven&#x27;t submitted them to any public
repository):
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;globocom&#x2F;python-txaws-centos-6&quot;&gt;python-txaws&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;globocom&#x2F;python-txzookeeper-centos-6&quot;&gt;python-txzookeeper&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;globocom&#x2F;zookeeper-centos-6&quot;&gt;zookeeper&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;With this patched Juju, you will have a pure-centos cloud. It does not enable
you to have multiple OSes in the same environment.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It&#x27;s important to notice that we are going to put some effort to make the Go
version of juju born supporting multiple OSes, ideally through an interface
that makes it extensible to any other OS, not Ubuntu and CentOS only.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Setting up a Django production environment: compiling and configuring nginx</title>
		<published>2011-11-06T00:00:00+00:00</published>
		<updated>2011-11-06T00:00:00+00:00</updated>
		<link href="https://blog.fsouza.dev/setting-up-django-production/" type="text/html"/>
		<id>https://blog.fsouza.dev/setting-up-django-production/</id>
		<content type="html">&lt;p&gt;Here is another series of posts: now I’m going to write about setting up a
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;djangoproject.com&quot;&gt;Django&lt;&#x2F;a&gt; production environment using
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nginx.org&quot;&gt;nginx&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;gunicorn.org&quot;&gt;Green Unicorn&lt;&#x2F;a&gt; in a
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;virtualenv.org&quot;&gt;virtual environment&lt;&#x2F;a&gt;. The subject in this first post is
nginx, which is my favorite web server.&lt;&#x2F;p&gt;
&lt;p&gt;This post explains how to install nginx from sources, compiling it (on Linux).
You might want to use &lt;code&gt;apt&lt;&#x2F;code&gt;, &lt;code&gt;zif&lt;&#x2F;code&gt;, &lt;code&gt;yum&lt;&#x2F;code&gt; or &lt;code&gt;ports&lt;&#x2F;code&gt;, but I prefer building
from sources. So, to build from sources, make sure you have all development
dependencies (C headers, including the PCRE library headers, nginx rewrite
module uses it). If you want to build nginx with SSL support, keep in mind that
you will need the libssl headers too.&lt;&#x2F;p&gt;
&lt;p&gt;Build nginx from source is a straightforward process: all you need to do is
download it from the official site and build with some simple options. In our
setup, we’re going to install nginx under &lt;code&gt;&#x2F;opt&#x2F;nginx&lt;&#x2F;code&gt;, and use it with the
nginx system user. So, let’s download and extract the latest stable version
(1.0.9) from nginx website:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;% curl -O http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.0.9.tar.gz
% tar -xzf nginx-1.0.9.tar.gz
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once you have extracted it, just configure, compile and install:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;% .&#x2F;configure --prefix=&#x2F;opt&#x2F;nginx --user=nginx --group=nginx
% make
% [sudo] make install
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, we provided the &lt;code&gt;&#x2F;opt&#x2F;nginx&lt;&#x2F;code&gt; to configure, make sure the &lt;code&gt;&#x2F;opt&lt;&#x2F;code&gt;
directory exists. Also, make sure that there is a user and a group called
&lt;em&gt;nginx&lt;&#x2F;em&gt;, if they don’t exist, add them:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;% [sudo] adduser --system --no-create-home --disabled-login --disabled-password --group nginx
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After that, you can start nginx using the command line below:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;% [sudo] &#x2F;opt&#x2F;nginx&#x2F;sbin&#x2F;nginx
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Linode provides an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;library.linode.com&#x2F;assets&#x2F;634-init-deb.sh&quot;&gt;init
script&lt;&#x2F;a&gt; that uses
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;man8&#x2F;start-stop-daemon&quot;&gt;start-stop-daemon&lt;&#x2F;a&gt;, you might want
to use it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;nginx-configuration&quot;&gt;nginx configuration&lt;&#x2F;h4&gt;
&lt;p&gt;nginx comes with a default &lt;code&gt;nginx.conf&lt;&#x2F;code&gt; file, let’s change it to reflect the
following configuration requirements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;nginx should start workers with the &lt;code&gt;nginx&lt;&#x2F;code&gt; user&lt;&#x2F;li&gt;
&lt;li&gt;nginx should have two worker processes&lt;&#x2F;li&gt;
&lt;li&gt;the PID should be stored in the &lt;code&gt;&#x2F;opt&#x2F;nginx&#x2F;log&#x2F;nginx.pid&lt;&#x2F;code&gt; file&lt;&#x2F;li&gt;
&lt;li&gt;nginx must have an access log in &lt;code&gt;&#x2F;opt&#x2F;nginx&#x2F;logs&#x2F;access.log&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;the configuration for the Django project we’re going to develop should be
versioned with the entire code, so it must be included in the &lt;code&gt;nginx.conf&lt;&#x2F;code&gt;
file (assume that the &lt;code&gt;library&lt;&#x2F;code&gt; project is in the directory &lt;code&gt;&#x2F;opt&#x2F;projects&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So here is the &lt;code&gt;nginx.conf&lt;&#x2F;code&gt; for the requirements above:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;user  nginx;
worker_processes  2;

pid logs&#x2F;nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application&#x2F;octet-stream;

    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;
                     &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;
                     &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;

    access_log  logs&#x2F;access.log  main;

    sendfile           on;
    keepalive_timeout  65;

    include &#x2F;opt&#x2F;projects&#x2F;showcase&#x2F;nginx.conf;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we just need to write the configuration for our Django project. I’m using
an old sample project written while I was working at
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.giran.com.br&quot;&gt;Giran&lt;&#x2F;a&gt;: the name is &lt;em&gt;lojas giranianas&lt;&#x2F;em&gt;, a nonsense
portuguese joke with a famous brazilian store. It’s an unfinished showcase of
products, it’s like an e-commerce project, but it can’t sell, so it’s just a
product catalog. The code is available at
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fsouza&#x2F;fast-track-django&quot;&gt;Github&lt;&#x2F;a&gt;. The &lt;code&gt;nginx.conf&lt;&#x2F;code&gt; file
for the repository is here:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen 80;
    server_name localhost;

    charset utf-8;

    location &#x2F; {
        proxy_set_header    X-Real-IP   $remote_addr;
        proxy_set_header    Host        $http_host;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_pass http:&#x2F;&#x2F;localhost:8000;
    }

    location &#x2F;static {
        root &#x2F;opt&#x2F;projects&#x2F;showcase&#x2F;;
        expires 1d;
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The server listens on port &lt;code&gt;80&lt;&#x2F;code&gt;, responds for the &lt;code&gt;localhost&lt;&#x2F;code&gt; hostname (&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;Protocols&#x2F;rfc2616&#x2F;rfc2616-sec14.html&quot;&gt;read
more about the Host
header&lt;&#x2F;a&gt;). The
&lt;code&gt;location &#x2F;static&lt;&#x2F;code&gt; directive says that nginx will serve the static files of the
project. It also includes an &lt;code&gt;expires&lt;&#x2F;code&gt; directive for caching control. The
&lt;code&gt;location &#x2F;&lt;&#x2F;code&gt; directive makes a &lt;code&gt;proxy_pass&lt;&#x2F;code&gt;, forwarding all requisitions to an
upstream server listening on port 8000, this server is the subject of the next
post of the series: the Green Unicorn (gunicorn) server.&lt;&#x2F;p&gt;
&lt;p&gt;Not only the HTTP request itself is forwarded to the gunicorn server, but also
some headers, that helps to properly deal with the request:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;X-Real-IP:&lt;&#x2F;strong&gt; forwards the remote address to the upstream server, so it can
know the real IP of the user. When nginx forwards the request to gunicorn,
without this header, all gunicorn will know is that there is a request coming
from localhost (or wherever the nginx server is), the remote address is
always the IP address of the machine where nginx is running (who actually
make the request to gunicorn)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Host:&lt;&#x2F;strong&gt; the &lt;code&gt;Host&lt;&#x2F;code&gt; header is forwarded so gunicorn can treat different
requests for different hosts. Without this header, it will be impossible to
Gunicorn to have these constraints&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;X-Forwarded-For:&lt;&#x2F;strong&gt; also known as XFF, this header provide more precise
information about the real IP who makes the request. Imagine there are 10
proxies between the user machine and your webserver, the XFF header will all
these proxies comma separated. In order to not turn a proxy into an
anonymizer, it’s a good practice to always forward this header.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So that is it, in the next post we are going to install and run gunicorn. In
other posts, we’ll see how to make automated deploys using
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;fabfile.org&quot;&gt;Fabric&lt;&#x2F;a&gt;, and some tricks on caching (using the
&lt;code&gt;proxy_cache&lt;&#x2F;code&gt; directive and integrating Django, nginx and
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;memcached.org&quot;&gt;memcached&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;See you in next posts.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Go solution for the Dining philosophers problem</title>
		<published>2011-10-30T00:00:00+00:00</published>
		<updated>2011-10-30T00:00:00+00:00</updated>
		<link href="https://blog.fsouza.dev/go-solution-for-dining-philosophers/" type="text/html"/>
		<id>https://blog.fsouza.dev/go-solution-for-dining-philosophers/</id>
		<content type="html">&lt;p&gt;I spent part of the Sunday solving the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dining_philosophers_problem&quot;&gt;Dining
Philosophers&lt;&#x2F;a&gt; using
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;&quot;&gt;Go&lt;&#x2F;a&gt;. The given solution is based in the description for
the problem present in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;greenteapress.com&#x2F;semaphores&#x2F;&quot;&gt;The Little Book of
Semaphores&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Dining Philosophers Problem was proposed by Dijkstra in 1965, when
dinosaurs ruled the earth. It appears in a number of variations, but the
standard features are a table with ﬁve plates, ﬁve forks (or chopsticks) and a
big bowl of spaghetti.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There are some constraints:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Only one philosopher can hold a fork at a time&lt;&#x2F;li&gt;
&lt;li&gt;It must be impossible for a deadlock to occur&lt;&#x2F;li&gt;
&lt;li&gt;It must be impossible for a philosopher to starve waiting for a fork&lt;&#x2F;li&gt;
&lt;li&gt;It must be possible for more than one philosopher to eat at the same time&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;No more talk, here is my solution for the problem:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;package main

import (
	&quot;fmt&quot;
	&quot;sync&quot;
	&quot;time&quot;
)

type Fork struct {
	sync.Mutex
}

type Table struct {
	philosophers chan Philosopher
	forks []*Fork
}

func NewTable(forks int) *Table {
	t := new(Table)
	t.philosophers = make(chan Philosopher, forks - 1)
	t.forks = make([]*Fork, forks)
	for i := 0; i &lt; forks; i++ {
		t.forks[i] = new(Fork)
	}
	return t
}

func (t *Table) PushPhilosopher(p Philosopher) {
	p.table = t
	t.philosophers &lt;- p
}

func (t *Table) PopPhilosopher() Philosopher {
	p := &lt;-t.philosophers
	p.table = nil
	return p
}

func (t *Table) RightFork(philosopherIndex int) *Fork {
	f := t.forks[philosopherIndex]
	return f
}

func (t *Table) LeftFork(philosopherIndex int) *Fork {
	f := t.forks[(philosopherIndex + 1) % len(t.forks)]
	return f
}

type Philosopher struct {
	name string
	index int
	table *Table
	fed chan int
}

func (p Philosopher) Think() {
	fmt.Printf(&quot;%s is thinking...\n&quot;, p.name)
	time.Sleep(3e9)
	p.table.PushPhilosopher(p)
}

func (p Philosopher) Eat() {
	p.GetForks()
	fmt.Printf(&quot;%s is eating...\n&quot;, p.name)
	time.Sleep(3e9)
	p.PutForks()
	p.table.PopPhilosopher()
	p.fed &lt;- 1
}

func (p Philosopher) GetForks() {
	rightFork := p.table.RightFork(p.index)
	rightFork.Lock()

	leftFork := p.table.LeftFork(p.index)
	leftFork.Lock()
}

func (p Philosopher) PutForks() {
	rightFork := p.table.RightFork(p.index)
	rightFork.Unlock()

	leftFork := p.table.LeftFork(p.index)
	leftFork.Unlock()
}

func main() {
	table := NewTable(5)
	philosophers := []Philosopher{
		Philosopher{&quot;Thomas Nagel&quot;, 0, table, make(chan int)},
		Philosopher{&quot;Elizabeth Anscombe&quot;, 1, table, make(chan int)},
		Philosopher{&quot;Martin Heidegger&quot;, 2, table, make(chan int)},
		Philosopher{&quot;Peter Lombard&quot;, 3, table, make(chan int)},
		Philosopher{&quot;Gottfried Leibniz&quot;, 4, table, make(chan int)},
	}

	for {
		for _, p := range philosophers {
			go func(p Philosopher){
				p.Think()
				p.Eat()
			}(p)
		}

		for _, p := range philosophers {
			&lt;-p.fed
			fmt.Printf(&quot;%s was fed.\n&quot;, p.name)
		}
	}

}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Testing jQuery plugins with Jasmine</title>
		<published>2011-05-28T00:00:00+00:00</published>
		<updated>2011-05-28T00:00:00+00:00</updated>
		<link href="https://blog.fsouza.dev/testing-jquery-plugins-with-jasmine/" type="text/html"/>
		<id>https://blog.fsouza.dev/testing-jquery-plugins-with-jasmine/</id>
		<content type="html">&lt;p&gt;Since I started working at &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;globo.com&quot;&gt;Globo.com&lt;&#x2F;a&gt;, I developed some
jQuery plugins (for internal use) with my team, and we are starting to test
these plugins using &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pivotal.github.com&#x2F;jasmine&#x2F;&quot;&gt;Jasmine&lt;&#x2F;a&gt;, &lt;em&gt;“a
behavior-driven development framework for testing your JavaScript code”&lt;&#x2F;em&gt;. In
this post, I will show how to develop a very simple jQuery plugin (based on an
example that I learned with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;rdworth.org&#x2F;&quot;&gt;Ricard D. Worth&lt;&#x2F;a&gt;): zebrafy.
This plugin “zebrafies” a table, applying different classes to odd and even
lines. Let’s start setting up a Jasmine environment... First step is download
the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pivotal.github.com&#x2F;jasmine&#x2F;download.html&quot;&gt;standalone version of
Jasmine&lt;&#x2F;a&gt;, then extract it and
edit the runner. The runner is a simple HTML file, that loads Jasmine and all
JavaScript files you want to test. But, wait... why not test using node.js or
something like this? Do I really need the browser on this test? You don’t
&lt;strong&gt;need&lt;&#x2F;strong&gt;, but I think it is important to test a plugin that works with the DOM
using a real browser. Let’s delete some files and lines from &lt;em&gt;SpecRunner.html&lt;&#x2F;em&gt;
file, so we adapt it for our plugin. This is how the structure is going to look
like:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;.
├── SpecRunner.html
├── lib
│   ├── jasmine-1.0.2
│   │   ├── MIT.LICENSE
│   │   ├── jasmine-html.js
│   │   ├── jasmine.css
│   │   └── jasmine.js
│   └── jquery-1.6.1.min.js
├── spec
│   └── ZebrafySpec.js
└── src
    └── jquery.zebrafy.js
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can create the files &lt;code&gt;jquery.zebrafy.js&lt;&#x2F;code&gt; and &lt;code&gt;ZebrafySpec.js&lt;&#x2F;code&gt;, but
remember: it is BDD, we need to describe
the behavior first, then write the code. So let’s start writing the specs in
&lt;code&gt;ZebrafySpec.js&lt;&#x2F;code&gt; file using Jasmine. If you are familiar with
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;rspec.info&quot;&gt;RSpec&lt;&#x2F;a&gt; syntax, it’s easy to understand how to write spec
withs Jasmine, if you aren’t, here is the clue: Jasmine is a lib with some
functions used for writing tests in an easier way. I’m going to explain each
function “on demmand”, when we need something, we learn how to use it! ;)&lt;&#x2F;p&gt;
&lt;p&gt;First of all, we need to start a new test suite. Jasmine provides the
&lt;code&gt;describe&lt;&#x2F;code&gt; function for that, this function receives a string and another
function (a callback). The string describes the test suite and the function is
a callback that delimites the scope of the test suite. Here is the &lt;code&gt;Zebrafy&lt;&#x2F;code&gt;
suite:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;describe(&#x27;Zebrafy&#x27;, function () {

});
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s start describing the behavior we want to get from the plugin. The most
basic is: we want different CSS classes for odd an even lines in a table.
Jasmine provides the &lt;code&gt;it&lt;&#x2F;code&gt; function for writing the tests. It also receives a
string and a callback: the string is a description for the test and the
callback is the function executed as test. Here is the very first test:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;it(&#x27;should apply classes zebrafy-odd and zebrafy-even to each other table lines&#x27;, function () {
    var table = $(&quot;#zebra-table&quot;);
    table.zebrafy();
    expect(table).toBeZebrafyied();
});
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Okay, here we go: in the first line of the callback, we are using jQuery to
select a table using the &lt;code&gt;#zebra-table&lt;&#x2F;code&gt; selector, which will look up for a
table with the ID attribute equals to &lt;em&gt;“zebra-table”&lt;&#x2F;em&gt;, but we don’t have this
table in the DOM. What about add a new table to the DOM in a hook executed
before the test run and remove the table in another hook that runs after the
test? Jasmine provide two functions: &lt;code&gt;beforeEach&lt;&#x2F;code&gt; and &lt;code&gt;afterEach&lt;&#x2F;code&gt;. Both
functions receive a callback function to be executed and, as the names suggest,
the &lt;code&gt;beforeEach&lt;&#x2F;code&gt; callback is called before each test run, and the &lt;code&gt;afterEach&lt;&#x2F;code&gt;
callback is called after the test run. Here are the hooks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;beforeEach(function () {
    $(&#x27;&lt;table id=&quot;zebra-table&quot;&gt;&lt;&#x2F;table&gt;&#x27;).appendTo(&#x27;body&#x27;);
    for (var i=0; i &lt; 10; i++) {
        $(&#x27;&lt;tr&gt;&lt;&#x2F;tr&gt;&#x27;).append(&#x27;&lt;td&gt;&lt;&#x2F;td&gt;&#x27;).append(&#x27;&lt;td&gt;&lt;&#x2F;td&gt;&#x27;).append(&#x27;&lt;td&gt;&lt;&#x2F;td&gt;&#x27;).appendTo(&#x27;#zebra-table&#x27;);
    };
});

afterEach(function () {
    $(&quot;#zebra-table&quot;).remove();
});
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;beforeEach&lt;&#x2F;code&gt; callback uses jQuery to create a table with 10 rows and 3
columns and add it to the DOM. In &lt;code&gt;afterEach&lt;&#x2F;code&gt; callback, we just remove that
table using jQuery again. Okay, now the table exists, let’s go back to the
test:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;it(&#x27;should apply classes zebrafy-odd and zebrafy-even to each other table lines&#x27;, function () {
    var table = $(&quot;#zebra-table&quot;);
    table.zebrafy();
    expect(table).toBeZebrafyied();
});
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the second line, we call our plugin, that is not ready yet, so let’s forward
to the next line, where we used the &lt;code&gt;expect&lt;&#x2F;code&gt; function. Jasmine provides this
function, that receives an object and executes a &lt;em&gt;matcher&lt;&#x2F;em&gt; against it, there is
a lot of built-in matchers on Jasmine, but &lt;code&gt;toBeZebrafyied&lt;&#x2F;code&gt; is not a built-in
matcher. Here is where we know another Jasmine feature: the capability to write
custom matchers, but how to do this? You can call the &lt;code&gt;beforeEach&lt;&#x2F;code&gt; again, and
use the &lt;code&gt;addMatcher&lt;&#x2F;code&gt; method of Jasmine object:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;beforeEach(function () {
    this.addMatchers({
        toBeZebrafyied: function() {
            var isZebrafyied = true;

            this.actual.find(&quot;tr:even&quot;).each(function (index, tr) {
                isZebrafyied = $(tr).hasClass(&#x27;zebrafy-odd&#x27;) === false &amp;&amp; $(tr).hasClass(&#x27;zebrafy-even&#x27;);
                if (!isZebrafyied) {
                    return;
                };
            });

            this.actual.find(&quot;tr:odd&quot;).each(function (index, tr) {
                isZebrafyied = $(tr).hasClass(&#x27;zebrafy-odd&#x27;) &amp;&amp; $(tr).hasClass(&#x27;zebrafy-even&#x27;) === false;
                if (!isZebrafyied) {
                    return;
                };
            });

            return isZebrafyied;
        }
    });
});
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The method &lt;code&gt;addMatchers&lt;&#x2F;code&gt; receives an object where each property is a matcher.
Your matcher can receive arguments if you want. The object being matched can be
accessed using &lt;code&gt;this.actual&lt;&#x2F;code&gt;, so here is what the method above does: it takes
all odd &lt;code&gt;&amp;lt;tr&amp;gt;&lt;&#x2F;code&gt; elements of the table (&lt;code&gt;this.actual&lt;&#x2F;code&gt;) and check if them have the
CSS class &lt;code&gt;zebrafy-odd&lt;&#x2F;code&gt; and don’t have the CSS class &lt;code&gt;zebrafy-even&lt;&#x2F;code&gt;, then do
the same checking with even &lt;code&gt;&amp;lt;tr&amp;gt;&lt;&#x2F;code&gt; lines.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have wrote the test, it’s time to write the plugin. Here some
jQuery code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;(function ($) {
    $.fn.zebrafy = function () {
        this.find(&quot;tr:even&quot;).addClass(&quot;zebrafy-even&quot;);
        this.find(&quot;tr:odd&quot;).addClass(&quot;zebrafy-odd&quot;);
    };
})(jQuery);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’m not going to explain &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;docs.jquery.com&#x2F;Plugins&#x2F;Authoring&quot;&gt;how to implement a jQuery
plugin&lt;&#x2F;a&gt; neither &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;benalman.com&#x2F;news&#x2F;2010&#x2F;11&#x2F;immediately-invoked-function-expression&#x2F;&quot;&gt;what are those
brackets on
function&lt;&#x2F;a&gt;,
this post aims to show how to use Jasmine to test jQuery plugins.&lt;&#x2F;p&gt;
&lt;p&gt;By convention, jQuery plugins are “chainable”, so let’s make sure the zebrafy
plugin is chainable using a spec:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;it(&#x27;zebrafy should be chainable&#x27;, function() {
    var table = $(&quot;#zebra-table&quot;);
    table.zebrafy().addClass(&#x27;black-bg&#x27;);
    expect(table.hasClass(&#x27;black-bg&#x27;)).toBeTruthy();
});
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, we used the built-in matcher &lt;code&gt;toBeTruthy&lt;&#x2F;code&gt;, which asserts that
an object or expression is &lt;code&gt;true&lt;&#x2F;code&gt;. All we need to do is return the jQuery
object in the plugin and the test will pass:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;(function ($) {
    $.fn.zebrafy = function () {
        return this.each(function (index, table) {
            $(table).find(&quot;tr:even&quot;).addClass(&quot;zebrafy-even&quot;);
            $(table).find(&quot;tr:odd&quot;).addClass(&quot;zebrafy-odd&quot;);
        });
    };
})(jQuery);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, the plugin is tested and ready to release! :) You can check the entire code
and test with more spec in a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fsouza&#x2F;jquery-testing-jasmine&quot;&gt;GitHub
repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Splinter: Python tool for acceptance tests on web applications</title>
		<published>2011-05-14T00:00:00+00:00</published>
		<updated>2011-05-14T00:00:00+00:00</updated>
		<link href="https://blog.fsouza.dev/splinter-python-tool-for-acceptance/" type="text/html"/>
		<id>https://blog.fsouza.dev/splinter-python-tool-for-acceptance/</id>
		<content type="html">&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jnicklas&#x2F;capybara&quot;&gt;Capybara&lt;&#x2F;a&gt; and
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;brynary&#x2F;webrat&quot;&gt;Webrat&lt;&#x2F;a&gt; are great Ruby tools for acceptance
tests. A few months ago, we started a great tool for acceptance tests in
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;python.org&#x2F;&quot;&gt;Python&lt;&#x2F;a&gt; web applications, called
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;splinter.rtfd.org&quot;&gt;Splinter&lt;&#x2F;a&gt;. There are many acceptance test
tools on Python world: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;seleniumhq.org&#x2F;&quot;&gt;Selenium&lt;&#x2F;a&gt;,
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;idealistdev&#x2F;alfajor&quot;&gt;Alfajor&lt;&#x2F;a&gt;,
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.getwindmill.com&#x2F;&quot;&gt;Windmill&lt;&#x2F;a&gt;,
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;wwwsearch.sourceforge.net&#x2F;mechanize&#x2F;&quot;&gt;Mechanize&lt;&#x2F;a&gt;,
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pypi.python.org&#x2F;pypi&#x2F;zope.testbrowser&quot;&gt;zope.testbrowser&lt;&#x2F;a&gt;, etc.
Splinter was not created to be another acceptance tool, but an abstract layer
over other tools, its goal is provide a unique API that make acceptance testing
easier and funnier.&lt;&#x2F;p&gt;
&lt;p&gt;In this post, I will show some basic usage of Splinter for simple web
application tests. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cobrateam&#x2F;splinter&quot;&gt;Splinter&lt;&#x2F;a&gt; is a tool
useful on tests of any web application. You can even test a Java web
application using Splinter. This post example is a &amp;quot;test&amp;quot; of a Facebook
feature, just because I want to focus on how to use Splinter, not on how to
write a web application. The feature to be tested is the creation of an event
(the Splinter sprint), following all the flow: first the user will login on
Facebook, then click on &amp;quot;Events&amp;quot; menu item, then click on &amp;quot;Create an Event&amp;quot;
button, enter all event information and click on &amp;quot;Create event&amp;quot; button. So,
let’s do it…&lt;&#x2F;p&gt;
&lt;p&gt;First step is create a
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;splinter.readthedocs.io&#x2F;en&#x2F;latest&#x2F;api&#x2F;driver-and-element-api.html#module-splinter.browser&quot;&gt;Browser&lt;&#x2F;a&gt;
instance, which will provide method for interactions with browser (where the
browser is: Firefox, Chrome, etc.). The code we need for it is very simple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;browser = Browser(&quot;firefox&quot;)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Browser&lt;&#x2F;code&gt; is a class and its constructor receives the driver to be used with
that instance. Nowadays, there are three drivers for Splinter: &lt;code&gt;firefox&lt;&#x2F;code&gt;,
&lt;code&gt;chrome&lt;&#x2F;code&gt; and &lt;code&gt;zope.testbrowser&lt;&#x2F;code&gt;. We are using Firefox, and you can easily use
Chrome by simply changing the driver from &lt;code&gt;firefox&lt;&#x2F;code&gt; to &lt;code&gt;chrome&lt;&#x2F;code&gt;. It’s also very
simple to add another driver to Splinter, and I plan to cover how to do that in
another blog post here.&lt;&#x2F;p&gt;
&lt;p&gt;A new browser session is started when we got the &lt;code&gt;browser&lt;&#x2F;code&gt; object, and this is
the object used for Firefox interactions. Let&#x27;s start a new event on Facebook,
the Splinter Sprint. First of all, we need to &lt;em&gt;visit&lt;&#x2F;em&gt; the Facebook homepage.
There is a &lt;code&gt;visit&lt;&#x2F;code&gt; method on Browser class, so we can use it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;browser.visit(&quot;https:&#x2F;&#x2F;www.facebook.com&quot;)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;visit&lt;&#x2F;code&gt; is a blocking operation: it waits for page to load, then we can
navigate, click on links, fill forms, etc. Now we have Facebook homepage opened
on browser, and you probably know that we need to login on Facebook page, but
what if we are already logged in? So, let&#x27;s create a method that login on
Facebook with provided authentication data only the user is not logged in
(imagine we are on a &lt;code&gt;Test&lt;&#x2F;code&gt;Case class):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def do_login_if_need(self, username, password):
    if self.browser.is_element_present_by_css(&#x27;div.menu_login_container&#x27;):
        self.browser.fill(&#x27;email&#x27;, username)
        self.browser.fill(&#x27;pass&#x27;, password)
        self.browser.find_by_css(&#x27;div.menu_login_container input[type=&quot;submit&quot;]&#x27;).first.click()
        assert self.browser.is_element_present_by_css(&#x27;li#navAccount&#x27;)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What was made here? First of all, the method checks if there is an element
present on the page, using a CSS selector. It checks for a &lt;code&gt;div&lt;&#x2F;code&gt; that contains
the &lt;em&gt;username&lt;&#x2F;em&gt; and &lt;em&gt;password&lt;&#x2F;em&gt; fields. If that div is present, we tell the
browser object to fill those fields, then find the &lt;code&gt;submit&lt;&#x2F;code&gt; button and click on
it. The last line is an assert to guarantee that the login was successful and
the current page is the Facebook homepage (by checking the presence of
“Account” &lt;code&gt;li&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;We could also &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;splinter.rtfd.org&#x2F;en&#x2F;latest&#x2F;finding.html&quot;&gt;find elements&lt;&#x2F;a&gt;
by its texts, labels or whatever appears on screen, but remember: Facebook is
an internationalized web application, and we can’t test it using only a
specific language.&lt;&#x2F;p&gt;
&lt;p&gt;Okay, now we know how to visit a webpage, check if an element is present, fill
a form and click on a button. We&#x27;re also logged in on Facebook and can finally
go ahead create the &lt;em&gt;Splinter sprint&lt;&#x2F;em&gt; event. So, here is the event creation
flow, for a user:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;On Facebook homepage, click on “Events” link, of left menu&lt;&#x2F;li&gt;
&lt;li&gt;The “Events” page will load, so click on “Create an Event” button&lt;&#x2F;li&gt;
&lt;li&gt;The user see a page with a form to create an event&lt;&#x2F;li&gt;
&lt;li&gt;Fill the date and chose the time&lt;&#x2F;li&gt;
&lt;li&gt;Define what is the name of the event, where it will happen and write a short
description for it&lt;&#x2F;li&gt;
&lt;li&gt;Invite some guests&lt;&#x2F;li&gt;
&lt;li&gt;Upload a picture for the event&lt;&#x2F;li&gt;
&lt;li&gt;Click on “Create Event” button&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We are going to do all these steps, except the 6th, because the Splinter Sprint
will just be a public event and we don’t need to invite anybody. There are some
boring AJAX requests on Facebook that we need to deal, so there is not only
Splinter code for those steps above. First step is click on “Events” link. All
we need to do is &lt;code&gt;find&lt;&#x2F;code&gt; the link and &lt;code&gt;click&lt;&#x2F;code&gt; on it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;browser.find_by_css(&#x27;li#navItem_events a&#x27;).first.click()
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;find_by_css&lt;&#x2F;code&gt; method takes a CSS selector and returns an
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;splinter.rtfd.org&#x2F;en&#x2F;latest&#x2F;api&#x2F;element-list.html#splinter.element_list.ElementList&quot;&gt;ElementList&lt;&#x2F;a&gt;.
So, we get the first element of the list (even when the selector returns only
an element, the return type is still a &lt;em&gt;list&lt;&#x2F;em&gt;) and click on it. Like &lt;code&gt;visit&lt;&#x2F;code&gt;
method, &lt;code&gt;click&lt;&#x2F;code&gt; is a blocking operation: the driver will only listen for new
actions when the request is finished (the page is loaded).&lt;&#x2F;p&gt;
&lt;p&gt;We’re finally on &amp;quot;new event&amp;quot; page, and there is a form on screen waiting for data of the &lt;em&gt;Splinter Sprint&lt;&#x2F;em&gt;. Let’s fill the form. Here is the code for it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;browser.fill(&#x27;event_startIntlDisplay&#x27;, &#x27;5&#x2F;21&#x2F;2011&#x27;)
browser.select(&#x27;start_time_min&#x27;, &#x27;480&#x27;)
browser.fill(&#x27;name&#x27;, &#x27;Splinter sprint&#x27;)
browser.fill(&#x27;location&#x27;, &#x27;Rio de Janeiro, Brazil&#x27;)
browser.fill(&#x27;desc&#x27;, &#x27;For more info, check out the #cobratem channel on freenode!&#x27;)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is it: the event is going to happen on May 21th 2011, at 8:00 in the
morning (480 minutes). As we know, the event name is &lt;em&gt;Splinter sprint&lt;&#x2F;em&gt;, and we
are going to join some guys down here in Brazil. We filled out the form using
&lt;code&gt;fill&lt;&#x2F;code&gt; and &lt;code&gt;select&lt;&#x2F;code&gt; methods.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;fill&lt;&#x2F;code&gt; method is used to fill a &amp;quot;fillable&amp;quot; field (a textarea, an input,
etc.). It receives two strings: the first is the &lt;em&gt;name&lt;&#x2F;em&gt; of the field to fill
and the second is the &lt;em&gt;value&lt;&#x2F;em&gt; that will fill the field. &lt;code&gt;select&lt;&#x2F;code&gt; is used to
select an option in a select element (a “combo box”). It also receives two
string parameters: the first is the &lt;em&gt;name&lt;&#x2F;em&gt; of the select element, and the
second is the &lt;em&gt;value&lt;&#x2F;em&gt; of the option being selected.&lt;&#x2F;p&gt;
&lt;p&gt;Imagine you have the following select element:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;select name=&quot;gender&quot;&gt;
    &lt;option value=&quot;m&quot;&gt;Male&lt;&#x2F;option&gt;
    &lt;option value=&quot;f&quot;&gt;Female&lt;&#x2F;option&gt;
&lt;&#x2F;select&gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To select “Male”, you would call the select method this way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;browser.select(&quot;gender&quot;, &quot;m&quot;)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last action before click on “Create Event” button is upload a picture for
the event. On new event page, Facebook loads the file field for picture
uploading inside an &lt;code&gt;iframe&lt;&#x2F;code&gt;, so we need to switch to this frame and interact
with the form present inside the frame. To show the frame, we need to click on
“Add Event Photo” button and then switch to it, we already know how click on a
link:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;browser.find_by_css(&#x27;div.eventEditUpload a.uiButton&#x27;).first.click()
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we click this link, Facebook makes an asynchronous request, which means
the driver does not stay blocked waiting the end of the request, so if we try
to interact with the frame BEFORE it appears, we will get an
&lt;code&gt;ElementDoesNotExist&lt;&#x2F;code&gt; exception. Splinter provides the &lt;code&gt;is_element_present&lt;&#x2F;code&gt;
method that receives an argument called &lt;code&gt;wait_time&lt;&#x2F;code&gt;, which is the time Splinter
will wait for the element to appear on the screen. If the element does not
appear on screen, we can’t go on, so we can assume the test failed (remember we
are testing a Facebook feature):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;if not browser.is_element_present_by_css(&#x27;iframe#upload_pic_frame&#x27;, wait_time=10):
    fail(&quot;The upload pic iframe did&#x27;n&#x27;t appear :(&quot;)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;is_element_present_by_css&lt;&#x2F;code&gt; method takes a CSS selector and tries to find
an element using it. It also receives a &lt;code&gt;wait_time&lt;&#x2F;code&gt; parameter that indicates a
time out for the search of the element. So, if the &lt;code&gt;iframe&lt;&#x2F;code&gt; element with
&lt;em&gt;ID=”upload_pic_frame”&lt;&#x2F;em&gt; is not present or doesn’t appear in the screen after 10
seconds, the method returns &lt;code&gt;False&lt;&#x2F;code&gt;, otherwise it returns &lt;code&gt;True&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;&#x2F;strong&gt; &lt;code&gt;fail&lt;&#x2F;code&gt; is a pseudocode sample and doesn’t exist (if you’re
using &lt;code&gt;unittest&lt;&#x2F;code&gt; library, you can invoke &lt;code&gt;self.fail&lt;&#x2F;code&gt; in a TestCase, exactly
what I did in [complete snippet for this
example](https:&#x2F;&#x2F;github.com&#x2F;cobrateam&#x2F;splinter&#x2F;blob&#x2F;master&#x2F;samples&#x2F;test_facebook_events.py
&amp;quot;Snippet for creating a new event on Facebook using Splinter&amp;quot;), available at
Github).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Now we see the &lt;code&gt;iframe&lt;&#x2F;code&gt; element on screen and we can finally upload the
picture. Imagine we have a variable that contains the path of the picture (and
not a file object, &lt;code&gt;StringIO&lt;&#x2F;code&gt;, or something like this), and this variable name
is &lt;code&gt;picture_path&lt;&#x2F;code&gt;, this is the code we need:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;with browser.get_iframe(&#x27;upload_pic_frame&#x27;) as frame:
    frame.attach_file(&#x27;pic&#x27;, picture_path)
    time.sleep(10)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Splinter provides the &lt;code&gt;get_iframe&lt;&#x2F;code&gt; method that changes the context and returns
another objet to interact with the content of the frame. So we call the
&lt;code&gt;attach_file&lt;&#x2F;code&gt; method, who also receives two strings: the first is the &lt;em&gt;name&lt;&#x2F;em&gt; of
the input element and the second is the absolute &lt;em&gt;path&lt;&#x2F;em&gt; to the file being sent.
Facebook also uploads the picture asynchronously, but there’s no way to wait
some element to appear on screen, so I just put Python to sleep 10 seconds on
last line.&lt;&#x2F;p&gt;
&lt;p&gt;After finish all these steps, we can finally click on “Create Event” button and
asserts that Facebook created it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;browser.find_by_css(&#x27;label.uiButton input[type=&quot;submit&quot;]&#x27;).first.click()
title = browser.find_by_css(&#x27;h1 span&#x27;).first.text
assert title == &#x27;Splinter sprint&#x27;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After create an event, Facebook redirects the browser to the event page, so we
can check if it really happened by asserting the header of the page. That’s
what the code above does: in the new event page, it click on submit button, and
after the redirect, get the text of a span element and asserts that this text
equals to &lt;em&gt;“Splinter sprint”&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That is it! This post was an overview on Splinter API. Check out the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cobrateam&#x2F;splinter&#x2F;blob&#x2F;master&#x2F;samples&#x2F;test_facebook_events.py&quot;&gt;complete
snippet&lt;&#x2F;a&gt;,
written as a test case and also check out &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cobrateam&#x2F;splinter&quot;&gt;Splinter repository at
Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
